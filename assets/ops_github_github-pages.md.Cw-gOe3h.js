import{_ as s,c as i,o as a,a9 as n}from"./chunks/framework.BZ_v_l1r.js";const e="/assets/img.CVLqnjYt.png",l="/assets/img_1.BYTxfEAp.png",t="/assets/img_2.CgUc8rAL.png",m=JSON.parse('{"title":"github pages 部署网站","description":"","frontmatter":{},"headers":[],"relativePath":"ops/github/github-pages.md","filePath":"ops/github/github-pages.md","lastUpdated":1716276174000}'),p={name:"ops/github/github-pages.md"},h=n('<h1 id="github-pages-部署网站" tabindex="-1">github pages 部署网站 <a class="header-anchor" href="#github-pages-部署网站" aria-label="Permalink to &quot;github pages 部署网站&quot;">​</a></h1><h2 id="简单部署" tabindex="-1">简单部署 <a class="header-anchor" href="#简单部署" aria-label="Permalink to &quot;简单部署&quot;">​</a></h2><h3 id="步骤" tabindex="-1"><code>步骤</code> <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;`步骤`&quot;">​</a></h3><ul><li>把打包后的dist文件直接推到github仓库里 <img src="'+e+'" alt="img.png"></li><li>然后在仓库里面点击Setting=&gt;pages=&gt;选择分支=&gt;部署的位置=&gt;保存就可以了 <img src="'+l+`" alt="img_1.png"></li><li>然后就会生成一个地址,我们直接访问这个地址就可以跟我们本地看到的页面一样</li></ul><h3 id="问题" tabindex="-1"><code>问题</code> <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;\`问题\`&quot;">​</a></h3><p>项目中用了第三方api的接口,在本地做了代理,可以使用,但是在<code>github pages</code>里面产生了跨域</p><h3 id="解决" tabindex="-1"><code>解决</code> <a class="header-anchor" href="#解决" aria-label="Permalink to &quot;\`解决\`&quot;">​</a></h3><p>因为无法在<code>github pages</code>里配置代理,最后只能选择<code>jsonp</code>的方式来解决跨域的问题</p><h3 id="缺陷" tabindex="-1"><code>缺陷</code> <a class="header-anchor" href="#缺陷" aria-label="Permalink to &quot;\`缺陷\`&quot;">​</a></h3><p>仔细思考一下,上面的尝试我们只做了部署的操作</p><p>也就是说,我如果要在我这个项目里改点什么东西,就必须手动打包后推送到远程才行(太麻烦了,我只想坐着喝茶)</p><h2 id="进阶部署" tabindex="-1">进阶部署 <a class="header-anchor" href="#进阶部署" aria-label="Permalink to &quot;进阶部署&quot;">​</a></h2><h3 id="项目的情况" tabindex="-1"><code>项目的情况</code> <a class="header-anchor" href="#项目的情况" aria-label="Permalink to &quot;\`项目的情况\`&quot;">​</a></h3><ul><li>这里我分了两个仓库</li><li>一个<code>私有</code>仓库是保存我的源码(怕被大佬嘲笑)</li><li>一个<code>开源</code>仓库是用来保存打包后的代码的(进行github pages 部署)</li><li>我在本地更改的代码每次都会推送到私有仓</li><li>然后打包后的<code>dist</code>文件都会推送到开源仓</li></ul><h3 id="最终解决方案-actions" tabindex="-1"><code>最终解决方案-actions</code> <a class="header-anchor" href="#最终解决方案-actions" aria-label="Permalink to &quot;\`最终解决方案-actions\`&quot;">​</a></h3><ul><li><code>github</code>提供了一个功能,有点像<code>jenkins</code>,用它就可以帮我们自动集成部署了</li><li>可以直接在github网页上操作,最后会生成一个工作流的文件放入你的项目中</li><li>能写这个文件需要一定的linux基础以及对<code>github actions</code>文档进行学习才行</li><li>这里我直接贴代码了(大家可以直接复制,改一改参数就可以)</li></ul><blockquote><p>注: 部署脚本有两种方式</p></blockquote><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Node.js CI CD</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    branches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Checkout</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@main</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm install &amp;&amp; npm run build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 部署到 GitHub Pages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Deploy</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">JamesIves/github-pages-deploy-action@v4.3.3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          token</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.ACCESS_TOKEN }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          repository-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">David-XIa001/JSON-internationalization</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          BRANCH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">main</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          FOLDER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dist</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          CLEAN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          commit-message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Deploy by source&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><ul><li>如果你是<code>开源仓库</code>的话,没必要搞得这么复杂(网络上有很多解决方案),因为<code>github pages</code>只支持开源仓的部署</li><li>但是我希望我的源码是<code>私有仓</code>,部署是<code>开源仓</code>,这个就稍微复杂一点</li><li>这里用了一个开源的部署库 <code>JamesIves/github-pages-deploy-action</code></li><li>里面有个参数repository-name,可以指定你要部署的仓库(前提是需要<code>PAT</code>)</li><li>而且需要将<code>PAT</code>的值放入到仓库的<code>secret</code>里</li><li>然后置于这个参数中 token: ACCESS_TOKEN <ul><li>创建<code>PAT(Personal Access Token)</code><ul><li>创建PAT的主要目的是给私有库访问目标库的权限，可以让私有库的actions推送构建好的代码到目标库中去</li><li><code>Profile Photo -&gt; Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Generate new token</code></li><li>勾选下面两个<code>scope: workflow and write:packages</code></li><li>PAT生成好之后，复制下来,为方便指代，不妨设它为TOKENXXX</li></ul></li><li>在私有库中设置<code>Secret</code><ul><li>在私有库中: <code>&gt; Settings -&gt; Secrets -&gt; Actions -&gt; New repository secret</code></li><li>粘贴刚才生成的PAT TOKENXXX 到value框中，并命名这个secret为ACCESS_TOKEN</li></ul></li></ul></li><li>这里基本就完事了,我们向私有仓push一下,这个action就会自动执行 <img src="`+t+'" alt="img.png"></li></ul>',19),r=[h];function k(c,o,d,E,g,u){return a(),i("div",null,r)}const y=s(p,[["render",k]]);export{m as __pageData,y as default};
